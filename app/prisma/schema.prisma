generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/smart_task_manager/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  firstName     String?
  lastName      String?
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relations
  accounts       Account[]
  sessions       Session[]
  tasks          Task[]
  categories     Category[]
  dailyStats     DailyStats[]
  subjects       Subject[]
  timerSessions  TimerSession[]
  studySessions  StudySession[]
  preferences    UserPreferences?

  @@map("users")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#3B82F6")
  isDefault Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@unique([userId, name])
  @@map("categories")
}

model Task {
  id           String    @id @default(cuid())
  title        String
  description  String?
  priority     Int       @default(1) // 1=low, 2=medium, 3=high, 4=urgent
  aiPriority   Int?      // ai suggested priority
  status       String    @default("todo") // todo, in_progress, completed
  dueDate      DateTime?
  completedAt  DateTime?
  timeSpent    Int       @default(0) // minutes spent on this task
  userId       String
  categoryId   String
  subjectId    String?   // for study tasks
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subject       Subject?       @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  timerSessions TimerSession[]

  @@map("tasks")
}

model DailyStats {
  id              String   @id @default(cuid())
  userId          String
  date            DateTime @unique
  tasksCompleted  Int      @default(0)
  tasksCreated    Int      @default(0)
  productivityScore Int    @default(0) // calculated score 0-100
  streakDays      Int      @default(0)
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_stats")
}

model Subject {
  id           String   @id @default(cuid())
  name         String
  color        String   @default("#3B82F6")
  totalTime    Int      @default(0) // total minutes studied
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks         Task[]
  studySessions StudySession[]
  timerSessions TimerSession[]

  @@unique([userId, name])
  @@map("subjects")
}

model TimerSession {
  id          String    @id @default(cuid())
  taskId      String?   // optional for non-task timers
  subjectId   String?   // for subject-only timers
  userId      String
  startTime   DateTime
  endTime     DateTime?
  duration    Int       @default(0) // minutes spent
  isActive    Boolean   @default(true)
  sessionType String    @default("work") // work, short_break, long_break
  createdAt   DateTime  @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("timer_sessions")
}

model StudySession {
  id          String   @id @default(cuid())
  subjectId   String
  userId      String
  date        DateTime @default(now())
  duration    Int      @default(0) // minutes studied that day
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([userId, subjectId, date])
  @@map("study_sessions")
}

model UserPreferences {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  theme                  String   @default("system") // light, dark, system
  backgroundImage        String?  // URL or file path
  soundEnabled           Boolean  @default(true)
  notificationsEnabled   Boolean  @default(true)
  celebrationEnabled     Boolean  @default(true)
  compactView            Boolean  @default(false)
  commissionRate         Float?   // for commission calculator
  defaultWorkDuration    Int      @default(25) // Pomodoro settings
  defaultShortBreak      Int      @default(5)
  defaultLongBreak       Int      @default(15)
  defaultLongBreakInterval Int    @default(4)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  name        String   // "First Task", "Week Streak", "Study Master"
  description String
  icon        String   @default("ðŸŽ‰")
  category    String   // "tasks", "timer", "streak"
  unlockedAt  DateTime @default(now())

  @@map("achievements")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
